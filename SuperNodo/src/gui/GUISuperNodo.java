/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import RMIInterface.Source;
import db.nodes.DBNodes;
import db.nodes.Node;
import db.sources.DBSources;
import java.time.Duration;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Nodo;
import model.SuperNodo;
import multicast.ListenerMulticastSuperNode;
import observer.CheckRefreshNodos;
import observer.CheckRefreshSuperNodos;


/**
 *
 * @author yo
 */
public class GUISuperNodo extends javax.swing.JFrame implements Observer{
    private  DefaultTableModel modelo;
    private  DefaultTableModel modeloN;
    private  DefaultTableModel modeloA;
    private int port;
    private String bdUrl;
    HashMap<String, Integer> dbSupNodos;
    HashMap<String, Integer> dbNodos;
    HashMap<String, Integer> dbArchivos;
    

    /**
     * Creates new form PrincipalGUI
     */
    public GUISuperNodo() {
        initComponents();
        //SingleModel single = SingleModel.getInstance();
        this.modelo = new javax.swing.table.DefaultTableModel();
        this.modeloN = new javax.swing.table.DefaultTableModel();
        this.modeloA = new javax.swing.table.DefaultTableModel();
        this.jTableSuperNodos.setModel(modelo);
        this.jTableNodos.setModel(modeloN);
        this.jTableArchivos.setModel(modeloA);
        
        
        this.modelo.addColumn("ID super Nodo");
        this.modelo.addColumn("Tiempo del nodo");
        
        this.modeloN.addColumn("ID Nodo");
        this.modeloN.addColumn("Tiempo del nodo");
        
        this.modeloA.addColumn("MD5");
        this.modeloA.addColumn("ID");
        this.modeloA.addColumn("Nombre archivo");
        
        
        Logger.getGlobal().info("Update Sup Nodo"+modelo);
        //TODO (funcion util)
        //this.modelo.addRow(new Object[]{"aaa","ddddd"});
        
    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUISuperNodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUISuperNodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUISuperNodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUISuperNodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSuperNodos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableNodos = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableArchivos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("ID");

        jTableSuperNodos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "ID", "TIME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableSuperNodos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("SuperNodos", jPanel1);

        jTableNodos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "ID", "TIME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableNodos);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Nodos", jPanel2);

        jTableArchivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "MD5", "ID", "name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableArchivos);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Archivos", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(idLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    GUISuperNodo xwe = new GUISuperNodo();
                    xwe.setVisible(true);
                    xwe.main();
                } catch (InterruptedException ex) {
                    Logger.getLogger(GUISuperNodo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
    }
    public void main() throws InterruptedException{
        this.dbSupNodos = new HashMap<String, Integer>();
        this.dbNodos = new HashMap<String, Integer>();
        this.dbArchivos = new HashMap<String, Integer>();
        this.port = Integer.parseInt(JOptionPane.showInputDialog("Puerto del servidor rmi =)",""+(int) (Math.random()*9999 + 6666)));
        this.bdUrl = JOptionPane.showInputDialog("Localizacion de la DB ","/home/yo/Documents/db"+((int) (Math.random()*10 + 1))+"/base.db");
        System.out.println("PUERTO:"+port);
        System.out.println("DB:"+this.bdUrl);
        supernodo.SuperNodo sup = new supernodo.SuperNodo(this.port,this.bdUrl);
        sup.setPgui(this);
        Thread hilo = new Thread(sup);
        hilo.run();
        this.idLabel.setText("127.0.0.1:"+this.port);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableArchivos;
    private javax.swing.JTable jTableNodos;
    private javax.swing.JTable jTableSuperNodos;
    // End of variables declaration//GEN-END:variables

    @Override
    synchronized public void update(Observable o, Object arg) {/*
        //DefaultTableModel modelo = SingleModel.getInstance().getModel();
        DefaultTableModel modelN = SingleModel.getInstance().getModelN();
        DefaultTableModel modelA = SingleModel.getInstance().getModelA();
        */
        //System.out.println(dbSupNodos);
        if(o instanceof ListenerMulticastSuperNode){ //si viene del multicast
            if(arg instanceof SuperNodo){//Add super nodo
                //System.out.println("Add Sup Nodo "+models);
                SuperNodo sup = (SuperNodo)arg;
                LocalTime tA = LocalTime.now();
                modelo.addRow(new Object[]{sup.getId().toString(),""+Duration.between(sup.getTime(),tA).getSeconds()});
                this.jTableSuperNodos.validate();
                this.dbSupNodos.put(sup.getId(), modelo.getRowCount());
            }
            else if(arg instanceof SuperNodo[]){//si es un update refresh super nodo
                
                //System.out.println("Update Sup Nodo"+models);
                SuperNodo[] supNodos = (SuperNodo[]) arg;
                Duration diferencia = Duration.between(supNodos[0].getTime(), supNodos[1].getTime());
                Integer position = this.dbSupNodos.get(supNodos[0].getId());
                modelo.setValueAt(diferencia.toString(),position-1, 1);
                this.jTableSuperNodos.validate();
            }
        }
        else if(o instanceof CheckRefreshSuperNodos){// si del demonio
            if(this.dbSupNodos.size()>0){
                //System.out.println("DESDEEeeeeeeeee el HILo");
                SuperNodo []sup = (SuperNodo []) arg;
                System.out.println("Borrar cosas de la DB ");
                for (SuperNodo superNodo : sup) {
                    //System.out.println(superNodo.getId());
                    int pos = this.dbSupNodos.get(superNodo.getId());
                    this.modelo.removeRow(pos-1);
                    this.dbSupNodos.remove(superNodo.getId());
                    for(String key: this.dbSupNodos.keySet()){
                        int val = this.dbSupNodos.get(key);
                        if(val>pos){
                            this.dbSupNodos.put(key, val-1);
                        }
                    }
                }
            }
        }else if((o instanceof CheckRefreshNodos) && (arg instanceof Nodo[])){ // si del demonio
            //Humbral sobrepasado
            if(this.dbNodos.size()>0){
            Nodo[] sup = (Nodo[]) arg;
            /*//debug
                System.out.println("MAp");
                for (Object algo : this.dbNodos.keySet()) {
                    System.out.println(algo);
                }
            */
            System.out.println("Borrar cosas de la DB de NODOS");
            //System.out.println(Arrays.toString(sup));
            for (Nodo Nodo : sup) {
                System.out.println(Nodo.getId());
                int pos = this.dbNodos.get(Nodo.getId());
                this.modeloN.removeRow(pos - 1);
                this.dbNodos.remove(Nodo.getId());
                for (String key : this.dbNodos.keySet()) {
                    int val = this.dbNodos.get(key);
                    if (val > pos) {
                        this.dbNodos.put(key, val - 1);
                    }
                }
            }
            }
        }else if(o instanceof DBNodes){
            if( arg instanceof Node){ //Nuevo nodo Add GUI
                Node sup = (Node) arg;
                System.out.println("********GUISUPERNODO Nuevo agregando "+sup);
                LocalTime tA = LocalTime.now();
                modeloN.addRow(new Object[]{sup.getId().toString(), "" + Duration.between(sup.getTime(), tA).getSeconds()});
                this.jTableNodos.validate();
                this.dbNodos.put(sup.getId(), modeloN.getRowCount());
            }else if(arg instanceof Nodo[]){//update de la GUI
                //System.out.println("Update noder "+Arrays.toString((Nodo[])arg));
                this.updateTimersNodo((Nodo[])arg, this.dbNodos);
            }
        }else if(o instanceof DBSources){
            if( arg instanceof Source){ //Nuevo nodo Add GUI
                Source sup = (Source) arg;
                System.out.println("*********** ARCHIVOOOO nuevooo "+sup);
                sup.setId(sup.getId().replace("localhost", "127.0.0.1"));
                switch (sup.getTypeOp()) {
                    case Source.ADD:
                        modeloA.addRow(new Object[]{sup.getMd5(), sup.getId().toString(), sup.getName() });
                        this.jTableArchivos.validate();
                        this.dbArchivos.put(sup.getId()+sup.getName(), modeloA.getRowCount());
                        break;
                    case Source.REMOVE:
                        int pos = this.dbArchivos.get(sup.getId()+sup.getName());
                        this.modeloA.removeRow(pos - 1);
                        this.dbArchivos.remove(sup.getId()+sup.getName());
                        for (String key : this.dbArchivos.keySet()) {
                            int val = this.dbArchivos.get(key);
                            if (val > pos) {
                                this.dbArchivos.put(key, val - 1);
                            }
                        }
                        break;
                    case Source.UPDATE:
                        Integer position = this.dbArchivos.get(sup.getId()+sup.getName());
                        modeloA.setValueAt(sup.getMd5(), position - 1, 0);//MD5
                        modeloA.setValueAt(sup.getId(), position - 1, 1);// id 
                        modeloA.setValueAt(sup.getName(), position - 1, 1);// nombre
                        this.jTableArchivos.validate();
                        break;
                    default:
                        throw new AssertionError();
                }
            }
        }
    }

    private void addElementNodo(Node sup, HashMap<String, Integer> dbNodos) {
        LocalTime tA = LocalTime.now();
        modeloN.addRow(new Object[]{sup.getId().toString(), "" + Duration.between(sup.getTime(), tA).getSeconds()});
        this.jTableNodos.validate();
        this.dbNodos.put(sup.getId(), modeloN.getRowCount());
    }

    private void updateTimersNodo(Nodo[] nodo, HashMap<String, Integer> dbNodos) {
        //System.out.println("Update Sup Nodo"+models);
        Duration diferencia = Duration.between(nodo[0].getTime(), nodo[1].getTime());
        Integer position = this.dbNodos.get(nodo[0].getId());
        modeloN.setValueAt(diferencia.toString(), position - 1, 1);
        this.jTableNodos.validate();
    }

}

